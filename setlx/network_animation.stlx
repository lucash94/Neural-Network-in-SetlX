class animation(weights, biases, structure, test_data) {
	//member variablen
	mScreenSizeX := 1600;
	mScreenSizeY := 940;
	mAllPixel := 784;
	mSqrtAllPixel := 28;
	mBiases := biases;
	mWeights := weights;
	mTestData := test_data;
	mNetwork := structure[2..];

	//drawOutputLayer
	drawOutputLayer := procedure(x, y, r, text) {	
		for(i in {0 .. mNetwork[#mNetwork]-1}) {
			gfx_setPenColorRGB( 0.0, 0.0, 0.0 );
			
			gfx_filledCircle(x, ((mScreenSizeY-3*r*mNetwork[#mNetwork])/2)+3*r*i, r);
			gfx_textLeft(x+30, ((mScreenSizeY-3*r*mNetwork[#mNetwork])/2)+3*r*i, i + ": " + text[i+1]);
		}	
	};

	//drawNeuron
	//data = test_data, weights = mWeights, dataFlag = true|false, weightFlag = true|false, x-axis, y-axis, a, b, pixelSize
	drawNeuron := procedure(data, weights, maxTestData, minTestData, maxmWeights, minmWeights, dataFlag, mWeightsFlag, x, y, disX, disY, a, b, pixelSize) {
		color := 0.0;
		hadamardFlag := false;
		for(i in {1 .. mSqrtAllPixel}) {
			for(j in {1 .. mSqrtAllPixel}) {
				if(!dataFlag && !mWeightsFlag) {						// dataFlag == false && weightFlag == false; print init
					color := 0.0;
				} else if(dataFlag && !mWeightsFlag) {					// dataFlag == true && weightFlag == false; print values
					color := 1.0 - data[a][b][(mAllPixel-(mSqrtAllPixel*i)+j)];
				} else if(!dataFlag && mWeightsFlag) {					// dataFlag == false && weightFlag == true; print mWeights
					if(weights[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)]>0) {
						//standardize positive values
						color := weights[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)]/abs(maxmWeights);
					} else {
						//standardize negative values
						color := weights[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)]/abs(minmWeights);
					}
					//color := (weights[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)]+abs(minmWeights))/(maxmWeights+abs(minmWeights));
				} else if(dataFlag && mWeightsFlag) {					// dataFlag == true && weightFlag == true; print hadamard
					if(data[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)] == 0.0 || data[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)] == -0.0) {
						if(weights[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)]>0) {
							//standardize positive values
							color := weights[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)]/abs(maxmWeights);
						} else {
							//standardize negative values
							color := weights[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)]/abs(minmWeights);
						}
						hadamardFlag := false;
					} else {
						color := data[1][b][(mAllPixel-(mSqrtAllPixel*i)+j)];
						hadamardFlag := true;
					}
				}
				
				if(!dataFlag && !mWeightsFlag) {
					gfx_setPenColorRGB( color, color, color );
				} else if( color == 0.0 || color == -0.0 ) {
					gfx_setPenColorRGB( 1.0, 1.0, 1.0 );
				} else if(dataFlag && mWeightsFlag && !hadamardFlag) {
					if( color < 0.0 ) {
						// negative values | green
						// color * RGB(0,255,0) + RGB(255,255,255)
						gfx_setPenColorRGB( abs(color), 1, abs(color) );
					} else {	
						// positiv values | yellow
						// color * RGB(255,255,0) + RGB(255,255,255)
						gfx_setPenColorRGB( 1, 1, abs(color) );
					}
				} else {
					if( color < 0.0 ) {
						// negative values | blue
						// color * RGB(0,0,255) + RGB(255,255,255)
						gfx_setPenColorRGB( abs(color), abs(color), 1 );
					} else {	
						// positiv values | red
						// color * RGB(255,0,0) + RGB(255,255,255)
						gfx_setPenColorRGB( 1, abs(color), abs(color) );
					}
				}
				
				if(dataFlag && !mWeightsFlag) {
					gfx_filledRectangle( x+pixelSize*j+disX, y+pixelSize*i+disY, pixelSize/3, pixelSize/3 ); 
				} else {
					gfx_filledRectangle( x+pixelSize*j+disX, y+pixelSize*i+(a-1)*mSqrtAllPixel*pixelSize+disY, pixelSize/3, pixelSize/3 );
				}
				 
			}
		}
	};

	drawLayer := procedure(r, activeNeuron) {
		gfx_setPenColor("BLACK");
		for(i in {1 .. #mNetwork}) {	
			for(j in {0 .. mNetwork[i]-1}) {
				if(activeNeuron == j && i ==1) {
					gfx_setPenColorRGB( 1.0, 0.0, 0.0 );				
					gfx_filledCircle((mSqrtAllPixel*12+300*i), ((mScreenSizeY-r*(3*mNetwork[i]-1))/2)+3*r*j, r);
				} else {
					gfx_setPenColorRGB( 0.0, 0.0, 0.0 );
					gfx_filledCircle((mSqrtAllPixel*12+300*i), ((mScreenSizeY-r*(3*mNetwork[i]-1))/2)+3*r*j, r);
				
					if(i == #mNetwork) {			
						gfx_textRight((mSqrtAllPixel*12+300*i)+30, ((mScreenSizeY-r*(3*mNetwork[i]-1))/2)+3*r*j, j);
					}
				}
			}		
		}
	};	

	drawConnection := procedure(r) {
		gfx_setPenColor("BLACK");
		for(i in {1 .. #mNetwork-1}) {	
			for(j in {0 .. mNetwork[i]-1}) {
				for(k in {0 .. mNetwork[i+1]-1}) {
					if(i<#mNetwork) {
						gfx_line((mSqrtAllPixel*12+300*i+r), ((mScreenSizeY-r*(3*mNetwork[i]-1))/2)+3*r*j, (mSqrtAllPixel*12+300*(i+1)-r), ((mScreenSizeY-r*(3*mNetwork[i+1]-1))/2)+3*r*k);
					}	
				}
			}		
		}
	};

	drawNetwork := procedure() {	
		// height for mNetwork 2r*n+r*(n-1)=mScreenSizeY
		r := mScreenSizeY/(3*max(mNetwork)-1);
		
		drawLayer(r, -1);	    	
		drawConnection(r);	 
		drawNeuron([], mmWeights, 0, 0, 0, 0, false, false, 0, (mScreenSizeY-(mSqrtAllPixel*12))/2, 0, 0, 1, 0, 12);
	};

	animate := procedure(input) {	
		maxmWeights := max(mWeights[1]);
		minmWeights := min(mWeights[1]);
		
		maxTestData := max(mTestData[1][1]);
		minTestData := min(mTestData[1][1]);
		
		switch {
			case input == 0:
				gfx_clear();		
				drawNetwork();
				return animate( readInput() );	
				
			case input == 1000:
				gfx_clear();
			
				disX := 0;
				disY := 0;
				for(a in {1 .. 5}) {
					disX := 0;
					for(b in {1 .. 6}) { 
						drawNeuron(mTestData, mWeights, maxTestData, minTestData, maxmWeights, minmWeights, false, true, 100, 0, disX+b*mSqrtAllPixel*6, disY, 1, 30-(a*6)+b, 6);
						disX += 10;
					}
					disY += 10+mSqrtAllPixel*6;
				}
				return animate( readInput() );
				
			case input>=100 && input<1000:
				gfx_clear();
			
				data := [];
				for(a in {1 .. 30}) {
					data +=  la_hadamard( la_matrix(mWeights[1][a])!, la_matrix([mTestData[input-100][1]]) ) ;	
				}
				// Get calculated outputs
				[captionsHiddenLayer, outputHiddenLayer] := getCaptionForNeurons(mTestData[input-100][1], mWeights, mBiases, mTestData[input-100][2]);
				outputLastLayer := getNetworkOutputs(outputHiddenLayer, mWeights, mBiases);
				
				// draw output layer
				r := mScreenSizeY/(3*max(mNetwork)-1);
				// output values as list
				drawOutputLayer(1450, 0, r, outputLastLayer);
				
				// draw input values	
				disX := 0;
				disY := 0;
				drawNeuron(mTestData, mWeights, maxTestData, minTestData, maxmWeights, minmWeights, true, false, 0, (mScreenSizeY-6*mSqrtAllPixel)/2, disX, disY, input-100, 1, 6);
				
				disX := 0;
				disY := 0;

				// Counter for current neuron
				neuronNumber := 1;
				for(a in {1 .. 5}) {
					disX := 0;
					for(b in {1 .. 6}) {
						gfx_setPenColor("BLACK");
						gfx_textLeft(100+disX+b*mSqrtAllPixel*6, disY, captionsHiddenLayer[neuronNumber]);
						disY += 10;
						drawNeuron([data], mWeights, maxTestData, minTestData, maxmWeights, minmWeights, true, true, 100, 0, disX+b*mSqrtAllPixel*6, disY, 1, 30-(a*6)+b, 6);
						disX += 10;
						disY -= 10;
						neuronNumber += 1;
					}
					disY += 30+mSqrtAllPixel*6;
				}
				return animate( readInput() );
				
			case mNetwork[1] < input || 1 > input:
				gfx_setMessage( "Error: Neuron is not in Layer!" ); 
				return animate( readInput() );

			default:
				gfx_clear();
				gfx_setMessage( "Success: Printing neuron!" );
				r := mScreenSizeY/(3*max(mNetwork)-1);
				drawLayer(r, input-1);
				drawConnection(r);
				
				drawNeuron(mTestData, mWeights, maxTestData, minTestData, maxmWeights, minmWeights, false, true, 0, (mScreenSizeY-(mSqrtAllPixel*12))/2, 0, 0, 1, input, 12);
				return animate( readInput() );
		}
	};

	waitForStart := procedure(){
		while( gfx_isPaused() ){
			sleep(1000);
		}
	};

	readInput := procedure() {
		gfx_setPaused(true);
		waitForStart();
		input := rational( gfx_getInput() );
		while( input == om ){
			gfx_setMessage("Wrong input!");
			gfx_setPaused(true);
			waitForStart();
			input := rational( gfx_getInput() );
		}
		return input;
	};

	// i: input values (pixels)
	// w: mWeights, b: mBiases
	// o: output neuron (int in {0..9})
	getCaptionForNeurons := procedure(i, w, b, o) {
		// Calculate output of each sigmoid neuron in second layer
		i := la_vector(i);
		a := sigmoid( (w[1]*i) + b[1] );

		// Get mWeights of 'selected' neuron of last layer
		ow := w[2][o];

		// Concat strings --> Captions for hidden layer
		// Form: Output * Weight of 'selected' Output Neuron
		captions := [ shortenDecimalNumber(a[k]) +  "*" + shortenDecimalNumber(ow[k]) + "=" + shortenDecimalNumber(a[k]*ow[k]) : k in [1..30] ];
		// Save outputs
		outputValues := [ a[k] : k in [1..30] ];
		return [captions, outputValues];
	};
	// Sigmoid function for vectors
	// 1.0/(1.0+exp(-z))
	sigmoid := procedure(z) {
		// z is a vector, so the function has to be used on every part of it
		return la_vector([ 1.0/(1.0 + exp(- z[i] )) : i in [1..#z] ]);
	};
	shortenDecimalNumber := procedure(d) {
		s := "";
		s += d;

		// For extrem small numbers which contain 'E-x'
		e_values := split(s, "E");
		if(#e_values > 1) {
			return e_values[1][1..3] + "e" + e_values[2];
		}
		else {
			return s[1..5];
		}
	};

	// i: input values from hidden layer
	// w: mWeights, b: mBiases
	getNetworkOutputs := procedure(i, w, b) {
		// Calculate output of each sigmoid neuron in second layer
		i := la_vector(i);
		a := sigmoid( (w[2]*i) + b[2] );
		return [ shortenDecimalNumber(a[k]) : k in [1..#a] ];
	};

	// structure is a list of nodes per layer, e.g. [mAllPixel, 30, 10]
	start_animation := procedure() {
		gfx_setCanvasSize(mScreenSizeX, mScreenSizeY);
		gfx_setXscale(0, mScreenSizeX);
		gfx_setYscale(0, mScreenSizeY);
		gfx_clear();	
		gfx_setPaused(true);
		gfx_setMessage( "Please enter the number of the neuron!" );
		gfx_addInputField( "Neuron" );
		gfx_addPlayPauseButton(true);

		drawNetwork();
		animate( readInput() );
	};
}
