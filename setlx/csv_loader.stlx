// "Global variables", to adjust the amount of loaded images
test_length := procedure() { return 10000; };
training_length := procedure() { return 10000; };

// Load test and training data
load_data := procedure() {
	// training_data: 	60,000 sets, a 784 pixels
	// test_data: 		10,000 sets, a 784 pixels
	// return [ [[img1] [img2] .. [img n]], [lbl1 .. lbln] ] for each set

	test_data := parse_csv("mnist_test.csv", test_length());
	training_data := parse_csv("mnist_train.csv", training_length());
	return [training_data, test_data];
};
// Parse csv into lists
parse_csv := procedure(file, len) {
	// create empty lists for images and according labels
	images := [];
	labels := [];
	
	// csv[image,pixels/label] --> csv[3][1]: Label of image 3
	print("Reading file:\t$file$");
	csv := readFile(file);

	// Convert every line into lists	
	for(i in {1..len}) {
		labels += [int(csv[i][1])];	
		// starting at 3, because 1 and 2 are label and ","	
		images += [parse_line(csv[i][3..])];	
		// e.g. images[1] = all pixels of image1; images[1][1] = 1st pixel of image1

		if(i%1000 == 0) {
			print("Image $i$ of $len$ imported");
		}
	}

	print("End reading:\t$file$");	
	return [images, labels];
};
// Read csv-string-line and parse into list
parse_line := procedure(s) {
	match (s) {
		case []					: return [];
		case [a,"," | r]		: return [int(a) / 256] + 		parse_line(r);		//   1,r
		case [a, b, "," | r]	: return [int(a+b) / 256] + 	parse_line(r);		//  12,r
		case [a, b, c, "," | r]	: return [int(a+b+c) / 256] + 	parse_line(r) ;		// 123,r	

		case [a]				: return [int(a) / 256];							// end of line
		case [a, b]				: return [int(a+b) / 256];
		case [a, b, c]			: return [int(a+b+c) / 256];

		default					: abort("Error while parsing csv-file: $s$");
	}
};


// create 10-dimensional vector with 1 in the jth position and zeros elsewhere
// desired Result from the neural network / label (0 to 9)
vectorized_result := procedure(j) {
	e := la_vector([0]*10);
	// +1, because the Index starts with 1 in SetlX (not 0)
	e[j+1] := 1;
	return e;
};

// format data sets according to their later use in the neural network
load_data_wrapper := procedure() {
	[tr_d, te_d] := load_data();
	
	// Convert test data: [ [pixels1, lbl1], [pixels2, lbl2], ...], like key-value-pairs
	test_data := format_pixels_label_pairs(te_d[1], te_d[2], test_length());

	// Convert training data: list of [pixels, label_unit_vector] per image
 	training_data := format_with_unit_vectors(tr_d[1], tr_d[2], training_length());

	return [training_data, test_data];   
};
format_pixels_label_pairs := procedure(pixels, labels, length) {
	return [ [pixels[i], labels[i]] : i in [1..length] ];
};
format_with_unit_vectors := procedure(pixels, labels, length) {
	return [ [la_vector(pixels[i]), vectorized_result(labels[i])] : i in [1..length] ];
};


// Start of program --> data is saved to variables
[training_data, test_data] := load_data_wrapper();