// s(izes): number of nodes in respective layers --> [3,2], two layer network with first layer 3 inputs & second layer 2 neurons
class network (s) {
	mNumLayers := #s;
	mSizes := s;
	mBiases := null;
	mWeights := null;

	// Random initialisation of weights and biases according to the network structure
	init := procedure() {
		computeRndBiases();
		computeRndWeights();
	};

	// Return output of network for 'a' as input
	// a is then list of calculated outputs
	feedforward := procedure(a) {
		// Vectorize a for multiplikation
		
		for( i in {1..#mBiases} ) { 
			a := sigmoid( (mWeights[i]*a) + mBiases[i] );
		}
		return a;
	};

	// Stochastic gradient descent learning algorithm
	// training_data is list of tuples [x,y] representing the inputs x and the correct digit y
	// eta is learning rate
	sgd := procedure(training_data, epochs, mini_batch_size, eta, test_data) {
		if(test_data != null) {
			n_test := #test_data; 		
		}
		n := #training_data;
		
		for(j in {0..epochs}) {
			training_data := shuffle(training_data);
			// Get mini-batches from the training data to train the network
			mini_batches := [ training_data[k..k+mini_batch_size-1] : k in [1,mini_batch_size..n] ];
			
			for(mini_batch in mini_batches) {
				update_mini_batch(mini_batch, eta);
			} 
			
			// Visual output
			if(test_data != null) {
				ev := evaluate(test_data);
				print("Epoch $j$: $ev$ / $n_test$");
			}
			else {
				print("Epoch $j$ complete");
			}
		}
	};

	// Update of weights and biases by using backpropagation on single mini_batches
	// mini_batch is list of tuples [x,y] of the training data
	update_mini_batch := procedure(mini_batch, eta) {
		[nabla_b, nabla_w] := getNabla_b_and_w();
		
		for([x,y] in mini_batch) {
			[delta_nabla_b, delta_nabla_w] := backprop(x,y);

			nabla_b := [ nabla_b[i] + delta_nabla_b[i] : i in {1..#nabla_b} ];
			nabla_w := [ nabla_w[i] + delta_nabla_w[i] : i in {1..#nabla_w} ];
		}
		
		// Adjust mWeights and mBiases
		this.mWeights := [ mWeights[i]-(eta/#mini_batch)*nabla_w[i] : i in {1..#mWeights} ];
		this.mBiases := [ mBiases[i]-(eta/#mini_batch)*nabla_b[i] : i in {1..#mBiases} ];
	};

	// Backpropagation to calculate the gradient for the cost function
	// x: training inputs
	// y: correct result for inputs x
	backprop := procedure(x,y) {
		[nabla_b, nabla_w] := getNabla_b_and_w();

		// Feedforward
		activation := x;
		// List of all activations (layer by layer)
		activations := [ la_matrix([x]) ];
		len_act := #activations;
		activations += [0 : i in [1..#mBiases]];
		
		// List of z-vectors (layer by layer)
		zs := [0 : i in [1..#mBiases]];
		
		for(i in {1..#mBiases}) {
			z := mWeights[i] * activation + mBiases[i];
			zs[i] := z;
			
			activation := sigmoid(z);
			activations[i + len_act] := activation;
		}

		// Backwards pass
		// la_hadamard() needs a matrix -> cdm is cost derivate in matrix form
		cdm := la_matrix( cost_derivative(activations[-1], y) );
		delta := la_hadamard( cdm, sigmoid_prime(zs[-1]));

		// No writing of nabla_b[-1] possible -> use length
		lb := #nabla_b;
		lw := #nabla_w;
	
		// Transposition is only defined for matrices in SetlX -> am is activation in matrix form
		// ! = transpose
		am := la_matrix(activations[-2]);
		nabla_w[lw] := delta * am!;
		nabla_b[lb] := delta;				
		
		for( l in {2..mNumLayers-1} ) {
			z := zs[-l];
			sp := sigmoid_prime(z);	
			delta := la_hadamard( (mWeights[-l+1]! * delta), sp );
			nabla_b[lb-l+1] := delta;
			nabla_w[lw-l+1] := delta * activations[-l-1];
		}
		return [nabla_b, nabla_w];
	};
	
	getNabla_b_and_w := procedure() {
		m_nabla_b := [ la_matrix( [[0]*#b[1]] * #b ) : b in this.mBiases ];
		m_nabla_w := [ la_matrix( [[0]*#w[1]] * #w ) : w in this.mWeights ];
		return [m_nabla_b, m_nabla_w];
	};

	// Returns sum of correct guesses after feedforwarding
	evaluate := procedure(test_data) {
		test_results := [0 : i in [1..#test_data]];
		
		i := 1;
		// x: calculated number; y: real number
		for( [x,y] in test_data ) {
			// Calculate index of max. output
			out := feedforward(x);
			max := out[1];
			index := 1;
			for(i in {2..#out}) {
				if( out[i] > max ) {
					max := out[i];
					index := i;
				}
			}
			// Index-1 is output number
			test_results[i] := [index-1,y];
			i += 1;
		}
		
		// Return sum of correct guesses
		return #[1 : [x,y] in test_results | x == y];
	};

	// Return vector of partial derivates
	cost_derivative := procedure(output_activations, y) {
		return (output_activations - y);
	};

	// Sigmoid function for vectors
	// 1.0/(1.0+exp(-z))
	sigmoid := procedure(z) {
		// z is a vector, so the function has to be used on every part of it
		return la_vector([ 1.0/(1.0 + exp(- z[i] )) : i in [1..#z] ]);
	};

	// Derivative of the sigmoid function, when z is a vector
	// sigmoid(z)*(1-sigmoid(z))
	sigmoid_prime := procedure(z) {
		s := sigmoid(z); 
		return la_matrix([ [ s[i] * (1 - s[i]) ] : i in [1..#s] ]);
	};

	// Compute random biases and weights in a shape fitting the declared network structure
	// mBiases: 	[ << <<b_layer1_neu1>> <<b_layer1_neu2>> ... >>, << <<b_layer2_neu1>> ... >>, ...] 
	// 				--> mBiases[layer][neuron][bias]	(bias is always one, because there is only one bias per neuron)
	computeRndBiases := procedure() {
		// i is each layer of the network (except the input layer)
		this.mBiases := [ computeRndMatrix([1, mSizes[i]]) : i in [2..mNumLayers] ];
	};
	// mWeights: 	[ << <<w1_layer2_neu1 w1_layer2_neu2 ... >> << w2_layer2_neu1 ... >> ... >>, << <<w1_layer3_neu1 w1_layer3_neu2 ... >> << w2_layer3_neu1 ... >> ... >>, ...]
	//				--> mWeights[layer-1][neuron][weight for input neuron]
	computeRndWeights := procedure() {
		this.mWeights := [ computeRndMatrix([mSizes[i], mSizes[i+1]]) : i in [1..mNumLayers-1] ];
	};

	// Computes matrix with random values based on a shape s
	// e.g. 	s := [1,2] --> << <<x>> <<y>> >>
	//			s := [2,1] --> << <<x y>> >>
	computeRndMatrix := procedure(s) {
		[i,j] := s;
		return la_matrix([
			[ ((random()-0.5)*2)/28 : p in [1..i] ] : q in [1..j]
		]);
	};
}