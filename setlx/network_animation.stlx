drawImage := procedure (test_data) {	
	x := 0;
	y := 0;
	disX := 0;
	disY := 0;
	for(k in {1 .. 3}) {
		for(i in {1 .. 28}) {
			for(j in {1 .. 28}) {
				color := 1.0-test_data[k][1][(784-(28*i)+j)];
				gfx_setPenColorRGB( color, color, color );
				// gfx_rectangle( x+12*j, y+12*i, 4, 4);
				gfx_filledRectangle( x+6*j, y+6*i+(k-1)*28*6+disY, 2, 2 ); 
			}
		}
		disY += 10;
	}
};

drawPixel := procedure(neuron, weights) {
	if (neuron == 0) {
		gfx_setPenColor("BLACK");
		x := 0;
		y := (900-(28*12))/2; 
		for(i in {1 .. 28}) {
			for(j in {1 .. 28}) {
				// gfx_rectangle( x+12*j, y+12*i, 4, 4);
				gfx_filledRectangle( x+12*j, y+12*i, 4, 4 ); 
			}
		}
	} else {
		x := 0;
		y := (900-(28*12))/2;
		for(i in {1 .. 28}) {
			for(j in {1 .. 28}) {
				a := #weights;
				b := #weights[1];
				c := #weights[1][1];
				color := (weights[1][neuron][(784-(28*i)+j)] + 3.5)/4.0;
				gfx_setPenColorRGB( color, color, color ); 
				// gfx_rectangle( x+12*j, y+12*i, 4, 4);
				gfx_filledRectangle( x+12*j, y+12*i, 4, 4 ); 
			}
		}
	}
};

drawNeuron := procedure(mNetwork, weights) {
	x := 100;
	y := 0;
	disX := 0;
	disY := 0;
	// y
	for(k in {1 .. 5}) {
		// x
		disX := 0;
		for(l in {1 .. 6}) {
			for(i in {1 .. 28}) {
				for(j in {1 .. 28}) {
					a := #weights;
					b := #weights[1];
					c := #weights[1][1];
					color := (weights[1][30-(k*6)+l][(784-(28*i)+j)] + 3.5)/4.0;
					gfx_setPenColorRGB( color, color, color ); 
					// gfx_rectangle( x+12*j, y+12*i, 4, 4);
					gfx_filledRectangle( x+6*j+l*28*6+disX, y+6*i+(k-1)*28*6+disY, 2, 2 ); 
				}
			}
			disX += 10;
		}
		disY += 10;
	}
};

drawLayer := procedure(mNetwork, r, activeNeuron) {
	gfx_setPenColor("BLACK");
	for(i in {1 .. #mNetwork}) {	
		for(j in {0 .. mNetwork[i]-1}) {
			if(activeNeuron == j && i ==1) {
				gfx_setPenColorRGB( 1.0, 0.0, 0.0 );				
				gfx_filledCircle((28*12+300*i), ((900-r*(3*mNetwork[i]-1))/2)+3*r*j, r);
			} else {
				gfx_setPenColorRGB( 0.0, 0.0, 0.0 );
				gfx_filledCircle((28*12+300*i), ((900-r*(3*mNetwork[i]-1))/2)+3*r*j, r);
				
				if(i == #mNetwork) {			
				gfx_textRight((28*12+300*i)+30, ((900-r*(3*mNetwork[i]-1))/2)+3*r*j, j);
			}
			}
		}		
	}
};	

drawConnection := procedure(mNetwork, r) {
	gfx_setPenColor("BLACK");
	for(i in {1 .. #mNetwork-1}) {	
		for(j in {0 .. mNetwork[i]-1}) {
			for(k in {0 .. mNetwork[i+1]-1}) {
				if(i<#mNetwork) {
					gfx_line((28*12+300*i+r), ((900-r*(3*mNetwork[i]-1))/2)+3*r*j, (28*12+300*(i+1)-r), ((900-r*(3*mNetwork[i+1]-1))/2)+3*r*k);
				}	
			}
		}		
	}
};

drawNetwork := procedure(networks) {	
	// height for mNetwork 2r*n+r*(n-1)=900
	mNetwork := networks[2..];
	r := 900/(3*max(mNetwork)-1);
	
	drawLayer(mNetwork, r, -1);	    	
	drawConnection(mNetwork, r
	);	 
	drawPixel(0, weights);	
	modus := true;
};

animate := procedure( mNetwork, input, weights, test_data ) {	
	
	if(input == 0) {
		gfx_clear();
		drawImage(test_data);
		drawNeuron(mNetwork, weights);
	} else if(input == 123) {
		gfx_clear();
		drawImage(test_data);
	} else if(mNetwork[1] < input || 1 > input) {
		gfx_setMessage( "Error: Neuron is not in Layer!" ); 
	} else {
		gfx_clear();
		gfx_setMessage( "Success: Printing neuron!" );
		r := 900/(3*max(mNetwork)-1);
		drawLayer(mNetwork, r, input-1);
		drawConnection(mNetwork, r);
		drawPixel(input, weights);
	}	
	
	animate( mNetwork, readInput(), weights );	
};

waitForStart := procedure(){
    while( gfx_isPaused() ){
        sleep(1000);
    }
};

readInput := procedure() {
	gfx_setPaused(true);
	waitForStart();
	input := rational( gfx_getInput() );
	while( input == om ){
		gfx_setMessage("Wrong input!");
        gfx_setPaused(true);
        waitForStart();
        input := rational( gfx_getInput() );
	}
	return input;
};

// structure is a list of nodes per layer, e.g. [784, 30, 10]
start_animation := procedure(weights, structure, test_data) {
	gfx_setCanvasSize(1600, 900);
	gfx_setXscale(0, 1600);
    gfx_setYscale(0, 900);
	gfx_clear();	
	gfx_setPaused(true);
	gfx_setMessage( "Please enter the number of the neuron!" );
	gfx_addInputField( "Neuron" );
	gfx_addPlayPauseButton(true);
	
	mNetwork := structure[2..];
	drawNetwork(structure);
	animate( mNetwork, readInput(), weights, test_data );
};